from ultralytics import YOLO
import cv2
from datetime import datetime
import time

def main():
    # Load YOLO model
    detector = YOLO(r"D:\Nus internship\Intermediate\project\real time saftey detction\dataset\runs\detect\train3\weights\best.pt")

    cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    if not cap.isOpened():
        print("Camera not found.")
        return

    MIN_CONFIDENCE = 0.5  # Confidence threshold

    # Define positive and negative labels according to your model
    PRESENT_GEAR = ["helmet", "mask", "safety vest", "hardhat"]   # add more if needed
    PERSON_LABELS = ["person", "head"]  # add or adjust based on your model

    # This variable will track the start time of a violation (missing helmet or mask)
    violation_start_time = None

    print("Press 'q' to quit.")
    while True:
        ret, frame = cap.read()
        if not ret:
            print("Can't receive frame. Exiting ...")
            break

        # YOLO detection
        results = detector.predict(source=frame, imgsz=640, conf=MIN_CONFIDENCE, verbose=False)
        detections = []
        for r in results:
            for box, conf, cls in zip(r.boxes.xyxy.cpu().numpy(),
                                      r.boxes.conf.cpu().numpy(),
                                      r.boxes.cls.cpu().numpy()):
                label = r.names[int(cls)].lower()
                detections.append({
                    "bbox": tuple(map(int, box)),
                    "label": label,
                    "conf": float(conf)
                })

        print([det["label"] for det in detections])  # Debug print

        any_gear_detected = False
        any_person_detected = False

        # Flag to indicate if in this frame a missing-gear violation is detected
        violation_detected = False

        for det in detections:
            x1, y1, x2, y2 = det['bbox']
            label = det['label']
            conf = det['conf']

            if label in PRESENT_GEAR:
                color = (0, 255, 0)  # Green
                any_gear_detected = True
            elif label.startswith("no-"):
                color = (0, 0, 255)  # Red
                # Set violation flag if missing helmet or mask is detected
                if label in ["no-helmet", "no-mask"]:
                    violation_detected = True
            elif label in PERSON_LABELS:
                color = (255, 255, 255)  # Optionally white for person
                any_person_detected = True
            else:
                color = (200, 200, 200)  # Light gray for other classes

            # For helmet and "no-" classes, draw boxes and text
            if label in PRESENT_GEAR or label.startswith("no-"):
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
                text_label = (label if label in PRESENT_GEAR else f"No {label[3:].capitalize()}")
                cv2.putText(frame, f"{text_label} {conf:.2f}", (x1, y1-10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, color, 2)

        # If no person/gear is detected, draw a yellow frame
        if not any_gear_detected and not any_person_detected:
            h, w = frame.shape[:2]
            cv2.rectangle(frame, (0, 0), (w-1, h-1), (0, 255, 255), 10)
            cv2.putText(frame, "NO PERSON/GEAR DETECTED", (40, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 255), 6)

        # --- New Timer Logic for Violations ---
        if violation_detected:
            # Start the timer if not already running
            if violation_start_time is None:
                violation_start_time = time.time()
            # If the violation condition persists for one minute, take a screenshot
            elif time.time() - violation_start_time >=10:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                screenshot_path = f"screenshot_violation_{timestamp}.jpg"
                cv2.imwrite(screenshot_path, frame)
                print(f"Violation screenshot saved: {screenshot_path}")
                # Reset the timer so the clock starts over for the next violation period
                violation_start_time = None
        else:
            # Reset the timer if violation is no longer present
            violation_start_time = None

        cv2.imshow("Helmet Detection (q to quit)", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
